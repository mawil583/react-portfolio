{"version":3,"sources":["components/navbar/index.jsx","pages/home.jsx","pages/portfolio.jsx","pages/aboutMe.jsx","pages/resume.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","as","to","NavDropdown","title","Item","Divider","eventKey","Home","Component","Portfolio","AboutMe","Resume","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAgCeA,EA5BA,WACX,OACI,6BAEI,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACnD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,mBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,KAAvB,QACA,kBAACJ,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,WAAvB,UACA,kBAACC,EAAA,EAAD,CAAaC,MAAM,WAAWP,GAAG,2BAC7B,kBAACM,EAAA,EAAYE,KAAb,CAAkBJ,GAAID,IAAME,GAAG,cAA/B,aACA,kBAACC,EAAA,EAAYE,KAAb,CAAkBJ,GAAID,IAAME,GAAG,YAA/B,YACA,kBAACC,EAAA,EAAYE,KAAb,CAAkBJ,GAAID,IAAME,GAAG,WAA/B,UACA,kBAACC,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBJ,GAAID,IAAME,GAAG,KAA/B,UAGR,kBAACJ,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,KAAvB,QACA,kBAACJ,EAAA,EAAIE,KAAL,CAAUC,GAAID,IAAME,GAAG,UAAUK,SAAU,GAA3C,e,gDCdTC,E,iLAPP,OACI,6BACI,yC,GAJGC,aCSJC,E,iLAPP,OACI,6BACI,8C,GAJQD,aCUTE,E,iLAPP,OACI,6BACI,4C,GAJMF,aCSPG,E,iLARP,OACI,6BACI,2C,GAJKH,aCyBNI,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,aAAaC,UAAWN,IAC1C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,WAAWC,UAAWL,IACxC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,UAAUC,UAAWJ,QCP7BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3cab1eeb.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => {\n    return (\n        <div>\n\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link as={Link} to=\"/\" >Home</Nav.Link>\n                        <Nav.Link as={Link} to=\"/resume\">Resume</Nav.Link>\n                        <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n                            <NavDropdown.Item as={Link} to=\"/Portfolio\">Portfolio</NavDropdown.Item>\n                            <NavDropdown.Item as={Link} to=\"/aboutme\">About Me</NavDropdown.Item>\n                            <NavDropdown.Item as={Link} to=\"/resume\">resume</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item as={Link} to=\"/\">Home</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                    <Nav>\n                        <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n                        <Nav.Link as={Link} to=\"/resume\" eventKey={2}>Resume</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    );\n};\nexport default NavBar;","import React, { Component } from 'react';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Home</h1>\n            </div>\n        )\n    }\n}\nexport default Home;","import React, { Component } from 'react';\n\nclass Portfolio extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Portfolio</h1>\n            </div>\n        )\n    }\n}\nexport default Portfolio;","import React, { Component } from 'react';\n\n\nclass AboutMe extends Component {\n    render() {\n        return (\n            <div>\n                <h1>AboutMe</h1>\n            </div>\n        )\n    }\n}\nexport default AboutMe;","import React, { Component } from 'react';\n\nclass Resume extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Resume</h1>\n            </div>\n        )\n    }\n}\n\nexport default Resume;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from './components/navbar/index';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/home';\nimport Portfolio from './pages/portfolio';\nimport AboutMe from './pages/aboutMe';\nimport Resume from './pages/resume';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/portfolio\" component={Portfolio} />\n          <Route exact path=\"/aboutme\" component={AboutMe} />\n          <Route exact path=\"/resume\" component={Resume} />\n        </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}